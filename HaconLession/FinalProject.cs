//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.05.0.1
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_ModelRegion, ho_TemplateImage;
    HObject ho_ModelContours, ho_RectifiedImage=null, ho_Regions=null;
    HObject ho_ConnectedRegions=null, ho_SelectedRegions=null;
    HObject ho_Contours=null, ho_Regions1=null, ho_RegionLines=null;

    // Local control variables 

    HTuple hv_ModelID = new HTuple(), hv_ModelRegionArea = new HTuple();
    HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
    HTuple hv_TestImages = new HTuple(), hv_T = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Score = new HTuple();
    HTuple hv_I = new HTuple(), hv_RectificationHomMat2D = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Radius = new HTuple(), hv_MetrologyHandle = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Row3 = new HTuple();
    HTuple hv_Column3 = new HTuple(), hv_Parameter = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_Radius1 = new HTuple(), hv_MetrologyHandle1 = new HTuple();
    HTuple hv_Index1 = new HTuple(), hv_Parameter1 = new HTuple();
    HTuple hv_SmlC = new HTuple(), hv_SR = new HTuple(), hv_SC = new HTuple();
    HTuple hv_BR = new HTuple(), hv_BC = new HTuple(), hv_Distance = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ModelRegion);
    HOperatorSet.GenEmptyObj(out ho_TemplateImage);
    HOperatorSet.GenEmptyObj(out ho_ModelContours);
    HOperatorSet.GenEmptyObj(out ho_RectifiedImage);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_RegionLines);
    //
    //Matching 01: ************************************************
    //Matching 01: BEGIN of generated code for model initialization
    //Matching 01: ************************************************
    HOperatorSet.SetSystem("border_shape_models", "false");
    //
    //Matching 01: Obtain the model image
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "C:/Users/Chanru/Desktop/Class/bd/bd1.png");
    //
    //Matching 01: Build the ROI from basic regions
    ho_ModelRegion.Dispose();
    HOperatorSet.GenRectangle1(out ho_ModelRegion, 445.809, 637.592, 801.311, 1070.62);
    //
    //Matching 01: Reduce the model template
    ho_TemplateImage.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_ModelRegion, out ho_TemplateImage);
    //
    //Matching 01: Create the shape model
    hv_ModelID.Dispose();
    HOperatorSet.CreateShapeModel(ho_TemplateImage, 6, (new HTuple(0)).TupleRad()
        , (new HTuple(360)).TupleRad(), (new HTuple(0.4233)).TupleRad(), (new HTuple("point_reduction_medium")).TupleConcat(
        "no_pregeneration"), "use_polarity", ((new HTuple(10)).TupleConcat(14)).TupleConcat(
        35), 3, out hv_ModelID);
    //
    //Matching 01: Get the model contour for transforming it later into the image
    ho_ModelContours.Dispose();
    HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
    //
    //Matching 01: Get the reference position
    hv_ModelRegionArea.Dispose();hv_RefRow.Dispose();hv_RefColumn.Dispose();
    HOperatorSet.AreaCenter(ho_ModelRegion, out hv_ModelRegionArea, out hv_RefRow, 
        out hv_RefColumn);
    //
    //Matching 01: END of generated code for model initialization
    //Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *
    //Matching 01: BEGIN of generated code for model application
    //
    //Matching 01: Loop over all specified test images
    hv_TestImages.Dispose();
    hv_TestImages = new HTuple();
    hv_TestImages[0] = "C:/Users/Chanru/Desktop/Class/bd/bd1.png";
    hv_TestImages[1] = "C:/Users/Chanru/Desktop/Class/bd/bd10.png";
    hv_TestImages[2] = "C:/Users/Chanru/Desktop/Class/bd/bd2.png";
    hv_TestImages[3] = "C:/Users/Chanru/Desktop/Class/bd/bd3.png";
    hv_TestImages[4] = "C:/Users/Chanru/Desktop/Class/bd/bd4.png";
    hv_TestImages[5] = "C:/Users/Chanru/Desktop/Class/bd/bd5.png";
    hv_TestImages[6] = "C:/Users/Chanru/Desktop/Class/bd/bd6.png";
    hv_TestImages[7] = "C:/Users/Chanru/Desktop/Class/bd/bd7.png";
    hv_TestImages[8] = "C:/Users/Chanru/Desktop/Class/bd/bd8.png";
    hv_TestImages[9] = "C:/Users/Chanru/Desktop/Class/bd/bd9.png";
    for (hv_T=0; (int)hv_T<=9; hv_T = (int)hv_T + 1)
    {
      //
      //Matching 01: Obtain the test image
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, hv_TestImages.TupleSelect(hv_T));
      //
      //Matching 01: Find the model
      hv_Row.Dispose();hv_Column.Dispose();hv_Angle.Dispose();hv_Score.Dispose();
      HOperatorSet.FindShapeModel(ho_Image, hv_ModelID, (new HTuple(0)).TupleRad()
          , (new HTuple(360)).TupleRad(), 0.5, 0, 0.5, "least_squares", (new HTuple(6)).TupleConcat(
          1), 0.75, out hv_Row, out hv_Column, out hv_Angle, out hv_Score);
      //
      //Matching 01: Code for rectification of the image
      //Matching 01: Calculate an inverse hom_mat2d for each of the matching results
      for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Score.TupleLength()))-1); hv_I = (int)hv_I + 1)
      {
        hv_RectificationHomMat2D.Dispose();
        HOperatorSet.HomMat2dIdentity(out hv_RectificationHomMat2D);
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.HomMat2dTranslate(hv_RectificationHomMat2D, hv_RefRow-(hv_Row.TupleSelect(
            hv_I)), hv_RefColumn-(hv_Column.TupleSelect(hv_I)), out ExpTmpOutVar_0);
        hv_RectificationHomMat2D.Dispose();
        hv_RectificationHomMat2D = ExpTmpOutVar_0;
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.HomMat2dRotate(hv_RectificationHomMat2D, -(hv_Angle.TupleSelect(
            hv_I)), hv_RefRow, hv_RefColumn, out ExpTmpOutVar_0);
        hv_RectificationHomMat2D.Dispose();
        hv_RectificationHomMat2D = ExpTmpOutVar_0;
        }
        ho_RectifiedImage.Dispose();
        HOperatorSet.AffineTransImage(ho_Image, out ho_RectifiedImage, hv_RectificationHomMat2D, 
            "constant", "false");
        //
        //Matching 01: Insert your code using the rectified image here

        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_Image, out ho_Regions, 99, 255);
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
            "and", 150, 800);

        hv_Row1.Dispose();hv_Column1.Dispose();hv_Radius.Dispose();
        HOperatorSet.SmallestCircle(ho_SelectedRegions, out hv_Row1, out hv_Column1, 
            out hv_Radius);
        hv_MetrologyHandle.Dispose();
        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_RectifiedImage, out hv_Width, out hv_Height);
        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, hv_Width, hv_Height);
        hv_Index.Dispose();
        HOperatorSet.AddMetrologyObjectCircleMeasure(hv_MetrologyHandle, hv_Row1, 
            hv_Column1, hv_Radius, 20, 5, 1, 30, "num_measures", 30, out hv_Index);
        HOperatorSet.ApplyMetrologyModel(ho_RectifiedImage, hv_MetrologyHandle);
        ho_Contours.Dispose();hv_Row3.Dispose();hv_Column3.Dispose();
        HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle, 
            "all", "all", out hv_Row3, out hv_Column3);
        hv_Parameter.Dispose();
        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", 
            "all_param", out hv_Parameter);
        //*********

        ho_Regions1.Dispose();
        HOperatorSet.Threshold(ho_Image, out ho_Regions1, 22, 78);
        hv_Row2.Dispose();hv_Column2.Dispose();hv_Radius1.Dispose();
        HOperatorSet.SmallestCircle(ho_Regions1, out hv_Row2, out hv_Column2, out hv_Radius1);
        hv_MetrologyHandle1.Dispose();
        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle1, hv_Width, hv_Height);
        hv_Index1.Dispose();
        HOperatorSet.AddMetrologyObjectCircleMeasure(hv_MetrologyHandle1, hv_Row2, 
            hv_Column2, hv_Radius1, 20, 5, 1, 30, new HTuple(), new HTuple(), out hv_Index1);
        HOperatorSet.ApplyMetrologyModel(ho_RectifiedImage, hv_MetrologyHandle1);
        hv_Parameter1.Dispose();
        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle1, "all", "all", 
            "result_type", "all_param", out hv_Parameter1);
        //*******

        hv_SmlC.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SmlC = HTuple.TupleGenSequence(
            0,(new HTuple(hv_Parameter.TupleLength()))-1,3);
        }
        hv_SR.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SR = hv_Parameter.TupleSelect(
            hv_SmlC);
        }
        hv_SC.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SC = hv_Parameter.TupleSelect(
            hv_SmlC+1);
        }

        hv_BR.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_BR = (hv_SR*0)+(hv_Parameter1.TupleSelect(
            0));
        }
        hv_BC.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_BC = (hv_SC*0)+(hv_Parameter1.TupleSelect(
            1));
        }


        hv_Distance.Dispose();
        HOperatorSet.DistancePp(hv_SR, hv_SC, hv_BR, hv_BC, out hv_Distance);

        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.DispObj(ho_RectifiedImage, HDevWindowStack.GetActive());
        }
        ho_RegionLines.Dispose();
        HOperatorSet.GenRegionLine(out ho_RegionLines, hv_SR, hv_SC, hv_BR, hv_BC);
        // stop(...); only in hdevelop
      }
    }
    //
    //Matching 01: *******************************************
    //Matching 01: END of generated code for model application
    //Matching 01: *******************************************
    //

    ho_Image.Dispose();
    ho_ModelRegion.Dispose();
    ho_TemplateImage.Dispose();
    ho_ModelContours.Dispose();
    ho_RectifiedImage.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_Contours.Dispose();
    ho_Regions1.Dispose();
    ho_RegionLines.Dispose();

    hv_ModelID.Dispose();
    hv_ModelRegionArea.Dispose();
    hv_RefRow.Dispose();
    hv_RefColumn.Dispose();
    hv_TestImages.Dispose();
    hv_T.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Angle.Dispose();
    hv_Score.Dispose();
    hv_I.Dispose();
    hv_RectificationHomMat2D.Dispose();
    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_Radius.Dispose();
    hv_MetrologyHandle.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_Index.Dispose();
    hv_Row3.Dispose();
    hv_Column3.Dispose();
    hv_Parameter.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_Radius1.Dispose();
    hv_MetrologyHandle1.Dispose();
    hv_Index1.Dispose();
    hv_Parameter1.Dispose();
    hv_SmlC.Dispose();
    hv_SR.Dispose();
    hv_SC.Dispose();
    hv_BR.Dispose();
    hv_BC.Dispose();
    hv_Distance.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

